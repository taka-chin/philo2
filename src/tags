!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
all_free	utils.c	/^int	all_free(t_info *input, t_fork *fork, t_share *share, t_philo *philo)$/;"	f
bad_end	observe.c	/^static bool	bad_end(t_philo *philo)$/;"	f	file:
check_finish	check.c	/^bool	check_finish(t_philo *philo)$/;"	f
create_time	log.c	/^long int	create_time(t_philo *philo)$/;"	f
dead_or_alive	dead_or_alive.c	/^void	*dead_or_alive(void *arg)$/;"	f
death_game	dead_or_alive.c	/^static void	death_game(t_philo *philo)$/;"	f	file:
fork_destory	destory.c	/^void	fork_destory(t_fork *fork, int i)$/;"	f
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_put_error	error.c	/^void	ft_put_error(int e_error_type)$/;"	f
get_thread_num	dead_or_alive.c	/^int	get_thread_num(t_share *share)$/;"	f
happy_end	observe.c	/^static bool	happy_end(t_philo *philo)$/;"	f	file:
init_fork	init.c	/^t_fork	*init_fork(t_info *input)$/;"	f
init_info	init.c	/^t_info	*init_info(int argc, char **input)$/;"	f
init_philo	init.c	/^t_philo	*init_philo(t_info *input, t_fork *fork, t_share *share)$/;"	f
init_share	init.c	/^t_share	*init_share(t_info *input)$/;"	f
input_check	check.c	/^bool	input_check(int argc, char **input)$/;"	f
is_dead	check.c	/^bool	is_dead(t_philo *philo)$/;"	f
is_stuffed	check.c	/^bool	is_stuffed(t_philo *philo)$/;"	f
main	main.c	/^int	main(int argc, char *argv[])$/;"	f
observe	observe.c	/^void	*observe(t_philo *philo)$/;"	f
over_flow_check	ft_atoi.c	/^static int	over_flow_check(long long num, int check, const char *s)$/;"	f	file:
philo_destory	destory.c	/^void	philo_destory(t_philo *philo, int i)$/;"	f
pthreads_create	pthread.c	/^void	pthreads_create(t_philo *philo)$/;"	f
pthreads_join	pthread.c	/^void	pthreads_join(t_philo *philo)$/;"	f
put_log	log.c	/^void	put_log(t_philo *philo, int e_state)$/;"	f
set_philo_value	init.c	/^static bool	set_philo_value(int number, t_fork *fork, t_share *share,$/;"	f	file:
share_destory	destory.c	/^void	share_destory(t_share *share)$/;"	f
