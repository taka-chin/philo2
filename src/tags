!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/takachin/42/remote_philo/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
actual_usleep	utils/actual_usleep.c	/^void actual_usleep(long int sleep_time)$/;"	f	typeref:typename:void
all_free	utils/all_free.c	/^int	all_free(t_info *input, t_fork *fork, t_share *share, t_philo *philo)$/;"	f	typeref:typename:int
bad_end	observe.c	/^static bool	bad_end(t_philo *philo)$/;"	f	typeref:typename:bool	file:
check_finish	check.c	/^bool	check_finish(t_philo *philo)$/;"	f	typeref:typename:bool
create_time	utils/create_log_time.c	/^long int	create_time(t_philo *philo)$/;"	f	typeref:typename:long int
dead_or_alive	dead_or_alive.c	/^void	*dead_or_alive(void *arg)$/;"	f	typeref:typename:void *
death_game	philo_actions.c	/^void death_game(t_philo *philo)$/;"	f	typeref:typename:void
eating	philo_actions.c	/^static void eating(t_philo *philo)$/;"	f	typeref:typename:void	file:
fork_destory	destory.c	/^void	fork_destory(t_fork *fork, int i)$/;"	f	typeref:typename:void
ft_atoi	utils/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_bzero	utils/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	utils/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
ft_isdigit	utils/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_put_error	error.c	/^void	ft_put_error(int e_error_type)$/;"	f	typeref:typename:void
get_now_time	utils/get_now_time.c	/^long int get_now_time()$/;"	f	typeref:typename:long int
get_thread_num	utils/get_thread_num.c	/^int	get_thread_num(t_share *share)$/;"	f	typeref:typename:int
happy_end	observe.c	/^static bool	happy_end(t_philo *philo)$/;"	f	typeref:typename:bool	file:
init_fork	init.c	/^t_fork	*init_fork(t_info *input)$/;"	f	typeref:typename:t_fork *
init_info	init.c	/^t_info	*init_info(int argc, char **input)$/;"	f	typeref:typename:t_info *
init_philo	init.c	/^t_philo	*init_philo(t_info *input, t_fork *fork, t_share *share)$/;"	f	typeref:typename:t_philo *
init_share	init.c	/^t_share	*init_share(t_info *input)$/;"	f	typeref:typename:t_share *
input_check	check.c	/^bool	input_check(int argc, char **input)$/;"	f	typeref:typename:bool
is_dead	check.c	/^bool	is_dead(t_philo *philo)$/;"	f	typeref:typename:bool
is_stuffed	check.c	/^bool	is_stuffed(t_philo *philo)$/;"	f	typeref:typename:bool
main	main.c	/^int	main(int argc, char *argv[])$/;"	f	typeref:typename:int
observe	observe.c	/^void	*observe(t_philo *philo)$/;"	f	typeref:typename:void *
over_flow_check	utils/ft_atoi.c	/^static int	over_flow_check(long long num, int check, const char *s)$/;"	f	typeref:typename:int	file:
philo_destory	destory.c	/^void	philo_destory(t_philo *philo, int i)$/;"	f	typeref:typename:void
pthreads_create	pthread.c	/^void	pthreads_create(t_philo *philo)$/;"	f	typeref:typename:void
pthreads_join	pthread.c	/^void	pthreads_join(t_philo *philo)$/;"	f	typeref:typename:void
put_fork	philo_actions.c	/^static void put_fork(t_philo *philo)$/;"	f	typeref:typename:void	file:
put_log	log.c	/^void	put_log(t_philo *philo, int e_state)$/;"	f	typeref:typename:void
set_philo_value	init.c	/^static bool	set_philo_value(int number, t_fork *fork, t_share *share,$/;"	f	typeref:typename:bool	file:
share_destory	destory.c	/^void	share_destory(t_share *share)$/;"	f	typeref:typename:void
sleeping	philo_actions.c	/^static void sleeping(t_philo *philo)$/;"	f	typeref:typename:void	file:
take_fork	philo_actions.c	/^static bool take_fork(t_philo *philo)$/;"	f	typeref:typename:bool	file:
thinking	philo_actions.c	/^static void thinking(t_philo *philo)$/;"	f	typeref:typename:void	file:
